#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""

sup
@author: Gabriel, Fernando G. & Angel

Here we are gonna start defining variables and imports
"""
from logic_pkg.MissionObjects.Dice import Dice
import time
from logic_pkg.scripts.Nodes.MissionNodes.AbstractMissionNode import AbstractMissionNode

name = "Dice"


class DiceMission(AbstractMissionNode):
    def __init__(self, argv):
        super(DiceMission, self).__init__(name, argv)
        self.camCenterX = 640/2
        self.camCenterY = 480/2

        self.visionlist = [Dice(1), Dice(2), Dice(3), Dice(4), Dice(5), Dice(6)]

        self.Dice1 = Dice()
        self.Dice2 = Dice()

    def _runMission(self):
        counter = 0
        while self.check_pair() == 0:
            self.forward_sleep(30, 1)
            counter += 1
            if counter == 5:
                print("mission failed we'll get em next time")
                break
        while self.check_big_dice():  # break while when dice is bigger than boundingbox
            if self.check_binding_box(self.Dice2):
                self.forward_sleep(40, 2)
            else:
                self.align(self.Dice2)
            self.update_dice(self.Dice1)
        self.forward_sleep(40, 3)
        self.backward_sleep(40, 6)  # retrace steps
        self.update_dice(self.Dice2)
        while self.check_big_dice():  # break while when dice is bigger than boundingbox
            if self.check_binding_box(self.Dice2):
                self.forward_sleep(40, 2)
            else:
                self.align(self.Dice2)
            self.update_dice(self.Dice2)
        self.forward_sleep(40, 3)
        return 0
        # sets finished state, end

    """"This is the self-alignment program"""
    def align(self, dice):  # movement values need to be adjusted
        current_depth = self.get_depth()
        self.update_dice(dice)
        if dice.get_centx() < self.camCenterX and dice.get_centy() < self.camCenterY:
            self.left_sleep(40, 1)
            self.go_to_depth(current_depth - 1)
        elif dice.get_centx() < self.camCenterX and dice.get_centy() > self.camCenterY:
            self.left_sleep(40, 1)
            self.go_to_depth(current_depth + 1)
        elif dice.get_centx() > self.camCenterX and dice.get_centy() > self.camCenterY:
            self.right_sleep(40, 1)
            self.go_to_depth(current_depth + 1)
        elif dice.get_centx() > self.camCenterX and dice.get_centy() < self.camCenterY:
            self.right_sleep(40, 1)
            self.go_to_depth(current_depth - 1)
        elif dice.get_centx() == self.camCenterX and dice.get_centy() < self.camCenterY:
            self.go_to_depth(current_depth - 1)
        elif dice.get_centx() == self.camCenterX and dice.get_centy() > self.camCenterY:
            self.go_to_depth(current_depth + 1)
        elif dice.get_centx() < self.camCenterX and dice.get_centy() == self.camCenterY:
            self.left_sleep(40, 1)
        elif dice.get_centx() > self.camCenterX and dice.get_centy() == self.camCenterY:
            self.right_sleep(40, 1)

    """"Here we are gonna check all patterns possible for 7 and 11, if such pattern exists then we go with that one"""
    def check_pair(self):
        if self.visionlist[4] is not None and self.visionlist[5] is not None:
            self.Dice1.set_centx(self.visionlist[4].get_centx())  # update for vision
            self.Dice1.set_centy(self.visionlist[4].get_centy())  # update for vision
            self.Dice1.set_value(5)
            self.Dice1.set_boundingbox(self.visionlist[4].get_bounding)  # needs update
            self.Dice2.set_centx(self.visionlist[5].get_centx())  # update for vision
            self.Dice2.set_centy(self.visionlist[5].get_centy())  # update for vision
            self.Dice2.set_value(6)
            self.Dice2.set_boundingbox(self.visionlist[5].get_bounding)  # needs update
            return 11
        elif self.visionlist[5] is not None and self.visionlist[0]is not None:
            self.Dice1.set_centx(self.visionlist[0].get_centx())  # update for vision
            self.Dice1.set_centy(self.visionlist[0].get_centy())  # update for vision
            self.Dice1.set_value(1)
            self.Dice1.set_boundingbox(self.visionlist[0].get_bounding)  # needs update
            self.Dice2.set_centx(self.visionlist[5].get_centx())  # update for vision
            self.Dice2.set_centy(self.visionlist[5].get_centy())  # update for vision
            self.Dice2.set_value(6)
            self.Dice2.set_boundingbox(self.visionlist[5].get_bounding)  # needs update
            return 7
        elif self.visionlist[4] is not None and self.visionlist[1] is not None:
            self.Dice1.set_centx(self.visionlist[4].get_centx())  # update for vision
            self.Dice1.set_centy(self.visionlist[4].get_centy())  # update for vision
            self.Dice1.set_value(5)
            self.Dice1.set_boundingbox(self.visionlist[4].get_bounding)  # needs update
            self.Dice2.set_centx(self.visionlist[1].get_centx())  # update for vision
            self.Dice2.set_centy(self.visionlist[1].get_centy())  # update for vision
            self.Dice2.set_value(2)
            self.Dice2.set_boundingbox(self.visionlist[1].get_bounding)  # needs update
            return 7
        elif self.visionlist[2] is not None and self.visionlist[3] is not None:
            self.Dice1.set_centx(self.visionlist[2].get_centx())  # update for vision
            self.Dice1.set_centy(self.visionlist[2].get_centy())  # update for vision
            self.Dice1.set_value(3)
            self.Dice1.set_boundingbox(self.visionlist[2].get_bounding)  # needs update
            self.Dice2.set_centx(self.visionlist[3].get_centx())  # update for vision
            self.Dice2.set_centy(self.visionlist[3].get_centy())  # update for vision
            self.Dice2.set_value(4)
            self.Dice2.set_boundingbox(self.visionlist[3].get_bounding)  # needs update
            return 7
        else:
            return 0

    def check_big_dice(self):  # checks 4 out of bound dice (Note: input variables)
        if self.x_dice_up_right > self.x_bounding_up_right and self.y_dice_up_right < self.y_bounding_up_right and \
                        self.x_dice_down_right < self.x_bounding_down_right and self.y_dice_down_right > \
                        self.y_bounding_down_right:
            return False
        elif self.x_dice_up_left < self.x_bounding_up_left and self.y_dice_up_left < self.y_bounding_up_left and  \
            self.x_dice_down_left < self.x_bounding_down_left and self.y_dice_down_left > \
                self.y_bounding_down_left:
            return False
        elif self.x_dice_up_right > self.x_bounding_up_right and self.y_dice_up_right < self.y_bounding_up_right \
            and self.x_dice_up_left < self.x_bounding_up_left and self.y_dice_up_left > \
                self.y_bounding_up_left:
            return False
        elif self.x_dice_down_right > self.x_bounding_down_right and self.y_dice_down_right > \
                self.y_bounding_down_right and self.x_dice_down_left < self.x_bounding_down_left and \
                self.y_dice_down_left > self.y_bounding_down_left:
            return False
        else:
            return True

    def forward_sleep(self, intensity, timer):
        self.forwards(True, intensity)
        time.sleep(timer)
        self.forwards(True, 0)

    def backward_sleep(self, intensity, timer):
        self.forwards(False, intensity)
        time.sleep(timer)
        self.forwards(False, 0)

    def left_sleep(self, intensity, timer):
        self.pitch_degrees(90)  # rotate 90 counterclockwise
        time.sleep(timer)
        self.forwards(True, intensity)
        time.sleep(timer)
        self.forwards(True, 0)
        self.pitch_degrees(-90)  # rotate 90 clockwise
        time.sleep(timer)

    def right_sleep(self, intensity, timer):
        self.pitch_degrees(-90)  # rotate 90 clockwise
        time.sleep(timer)
        self.forwards(True, intensity)
        time.sleep(timer)
        self.forwards(True, 0)
        self.pitch_degrees(90)  # rotate 90 counterclockwise
        time.sleep(timer)

    def update_dice(self, dice):  # update for vision
        dice.set_centx(self.visionlist[dice.get_value-1].get_centx)
        dice.set_centy(self.visionlist[dice.get_value - 1].get_centy)
        dice.set_boundingbox(self.visionlist[dice.get_value - 1].get_bounding)

    def check_binding_box(self, dice):
        self.update_dice(dice)
        if (self.camCenterX-50) < dice.get_centx() < (self.camCenterX+50) and (self.camCenterY-50) < dice.get_centx() <\
                (self.camCenterY+50):
            return True
        return False
